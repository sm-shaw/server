name: Sync New Upstream Branches and Notify

permissions:
  contents: write

on:
  schedule:
    - cron: '0 2 * * *'  # daily at 2am UTC
  workflow_dispatch:
    inputs:
      webhook_url:
        description: 'Webhook URL to notify on new branch'
        required: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your fork
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Git user
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Add upstream remote if missing
        run: |
          git remote get-url upstream || git remote add upstream https://github.com/MariaDB/server.git

      - name: Fetch all remotes
        run: git fetch --all

      - name: Sync branches and notify webhook
        env:
          RAW_WEBHOOK_URL: ${{ github.event.inputs.webhook_url }}
        run: |
          set -euo pipefail

          # Trim leading/trailing spaces
          WEBHOOK_URL="$(echo "$RAW_WEBHOOK_URL" | xargs || true)"
          echo "üîó Webhook URL: [$WEBHOOK_URL]"

          FORK_REMOTE=origin
          UPSTREAM_REMOTE=upstream

          echo "üîç Listing remote branches..."
          mapfile -t upstream_branches < <(git for-each-ref --format='%(refname:strip=3)' refs/remotes/$UPSTREAM_REMOTE)
          mapfile -t fork_branches < <(git for-each-ref --format='%(refname:strip=3)' refs/remotes/$FORK_REMOTE)

          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "üß≠ Default branch is $DEFAULT_BRANCH"

          array_contains() {
            local needle="$1"
            shift
            for item in "$@"; do
              [[ "$item" == "$needle" ]] && return 0
            done
            return 1
          }

          webhook_post() {
            local ref="$1"
            local ref_type="branch"
            if [[ -z "$WEBHOOK_URL" ]]; then
              echo "‚ùå WEBHOOK_URL is empty ‚Äî skipping webhook."
              return
            fi
            echo "üì° Sending webhook for $ref to $WEBHOOK_URL"
            curl -s -X POST \
              -H "X-GitHub-Event: create" \
              -H "Content-Type: application/json" \
              -d "{\"ref\":\"$ref\", \"ref_type\":\"$ref_type\"}" \
              "$WEBHOOK_URL" || echo "‚ö†Ô∏è Failed to send webhook to $WEBHOOK_URL"
          }

          echo "üîÑ Checking for new upstream branches to sync..."
          for branch in "${upstream_branches[@]}"; do
            [[ "$branch" == bb-* ]] && {
              echo "‚è≠Ô∏è Skipping upstream branch $branch (starts with bb-)"
              continue
            }

            if ! array_contains "$branch" "${fork_branches[@]}"; then
              echo "‚û°Ô∏è New upstream branch detected: $branch"
              git checkout -b "$branch" "$UPSTREAM_REMOTE/$branch"

              if git ls-tree -r --name-only HEAD | grep -q '^.github/workflows/'; then
                echo "‚ö†Ô∏è Branch $branch modifies workflows ‚Äî skipping push"
              else
                if git push "$FORK_REMOTE" "$branch"; then
                  echo "‚úÖ Pushed $branch to fork"
                  webhook_post "refs/heads/$branch"
                else
                  echo "‚ö†Ô∏è Failed to push $branch"
                fi
              fi

              git checkout "$DEFAULT_BRANCH"
              git branch -D "$branch"
            else
              echo "‚úÖ Branch $branch already exists in fork"
            fi
          done

          echo "üßπ Checking fork-only branches and cleaning up bb- branches..."
          for branch in "${fork_branches[@]}"; do
            if [[ "$branch" == bb-* ]]; then
              echo "üóëÔ∏è Deleting fork-only bb- branch: $branch"
              git push "$FORK_REMOTE" --delete "$branch" || echo "‚ö†Ô∏è Failed to delete $branch"
              continue
            fi

            if ! array_contains "$branch" "${upstream_branches[@]}"; then
              echo "üìç Branch $branch exists only in fork ‚Äî notify"
              webhook_post "refs/heads/$branch"
            fi
          done
