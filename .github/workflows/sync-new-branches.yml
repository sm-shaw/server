# ... previous code unchanged ...

for branch in "${upstream_branches[@]}"; do
  # Skip bb- branches
  if [[ "$branch" == bb-* ]]; then
    echo "‚è≠Ô∏è Skipping upstream branch $branch (starts with bb-)"
    continue
  fi
  # Check if this branch is missing from fork
  if ! printf '%s\n' "${fork_branches[@]}" | grep -Fxq "$branch" || true; then
    echo "‚û°Ô∏è New upstream branch detected: $branch"
    git checkout -b "$branch" "$UPSTREAM_REMOTE/$branch"
    if git ls-tree -r --name-only HEAD | grep -q '^.github/workflows/'; then
      echo "‚ö†Ô∏è Branch $branch modifies workflows ‚Äî skipping push"
    else
      if git push "$FORK_REMOTE" "$branch"; then
        echo "‚úÖ Pushed $branch to fork"
        webhook_post "refs/heads/$branch"
      else
        echo "‚ö†Ô∏è Failed to push $branch"
      fi
    fi
    git checkout "$DEFAULT_BRANCH"
    git branch -D "$branch"
  else
    echo "‚úÖ Branch $branch already exists in fork"
  fi
done

echo "üîÑ Checking fork-only branches and cleaning bb-..."
for branch in "${fork_branches[@]}"; do
  # Delete local bb- branches
  if [[ "$branch" == bb-* ]]; then
    echo "üóëÔ∏è Deleting fork-only bb- branch: $branch"
    git push "$FORK_REMOTE" --delete "$branch" || echo "‚ö†Ô∏è Failed to delete $branch"
    continue
  fi

  # Check if it exists in upstream
  if ! printf '%s\n' "${upstream_branches[@]}" | grep -Fxq "$branch" || true; then
    echo "üìç Branch $branch exists only in fork ‚Äî notify"
    webhook_post "refs/heads/$branch"
  fi
done
