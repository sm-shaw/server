name: Sync New Upstream Branches

permissions:
  contents: write

on:
  schedule:
    - cron: '0 2 * * *'  # Runs daily at 2am UTC
  workflow_dispatch:
    inputs:
      webhook_url:
        description: 'Webhook URL to notify on new branch'
        required: true

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your fork
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git user
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Add upstream remote
        run: git remote add upstream https://github.com/MariaDB/server.git

      - name: Fetch all remotes
        run: git fetch --all

      - name: Sync only new branches and notify webhook
        env:
          WEBHOOK_URL: ${{ github.event.inputs.webhook_url }}
        run: |
          FORK_REMOTE=origin
          UPSTREAM_REMOTE=upstream

          echo "Getting upstream branches..."
          UPSTREAM_BRANCHES=$(git for-each-ref --format='%(refname:strip=3)' refs/remotes/$UPSTREAM_REMOTE)

          echo "Getting fork branches..."
          FORK_BRANCHES=$(git for-each-ref --format='%(refname:strip=3)' refs/remotes/$FORK_REMOTE)

          for branch in $UPSTREAM_BRANCHES; do
            if ! echo "$FORK_BRANCHES" | grep -Fxq "$branch"; then
              echo "‚û°Ô∏è New branch detected: $branch"
              git checkout -b $branch $UPSTREAM_REMOTE/$branch

              if git ls-tree -r --name-only HEAD | grep -q '^.github/workflows/'; then
                echo "‚ö†Ô∏è Branch $branch modifies workflow files. Skipping push to avoid permission errors."
              else
                if git push $FORK_REMOTE $branch; then
                  echo "‚úÖ Pushed branch $branch successfully"

                  # Send webhook if provided
                  if [[ -n "$WEBHOOK_URL" ]]; then
                    curl -X POST -H "Content-Type: application/json" \
                         -d "{\"branch\":\"$branch\", \"repo\":\"sm-shaw/server\"}" \
                         "$WEBHOOK_URL"
                    echo "üì° Webhook sent for $branch"
                  fi
                else
                  echo "‚ö†Ô∏è Push failed for branch $branch ‚Äî skipping to avoid permission errors"
                fi
              fi

              git checkout main
              git branch -D $branch
            else
              echo "‚úÖ Branch $branch already exists in fork. Skipping."
            fi
          done
