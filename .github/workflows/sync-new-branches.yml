name: Sync Branches and Trigger Webhook

on:
  workflow_dispatch:
    inputs:
      webhook_url:
        description: 'Webhook URL to send POST requests to'
        required: true

jobs:
  sync-and-webhook:
    runs-on: ubuntu-latest
    env:
      UPSTREAM_REPO: mariadb/server
      FORK_REPO: sm-shaw/server

    steps:
    - name: Checkout fork repo
      uses: actions/checkout@v3
      with:
        repository: ${{ env.FORK_REPO }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up git remotes
      run: |
        git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
        git fetch upstream --prune

    - name: Find new branches and sync
      id: sync_branches
      run: |
        # Fetch all branches from upstream and fork
        git fetch upstream
        git fetch origin

        # List all branches on upstream and origin
        upstream_branches=$(git branch -r | grep upstream/ | sed 's|upstream/||')
        origin_branches=$(git branch -r | grep origin/ | sed 's|origin/||')

        webhook_url="${{ github.event.inputs.webhook_url }}"

        send_webhook() {
          local branch="$1"
          echo "üì° Sending webhook for refs/heads/$branch"
          curl -X POST "$webhook_url" \
            -H "X-GitHub-Event: create" \
            -H "Content-Type: application/json" \
            -d '{"ref":"refs/heads/'"$branch"'","ref_type":"branch"}'
        }

        # Check for new branches on upstream not in origin
        for branch in $upstream_branches; do
          if [[ "$branch" == "HEAD" ]]; then
            continue
          fi
          if ! echo "$origin_branches" | grep -qx "$branch"; then
            echo "‚û°Ô∏è New upstream branch detected: $branch"
            git checkout -b "$branch" "upstream/$branch"
            # Skip if branch modifies workflows to avoid infinite loops
            if git diff --name-only origin/main | grep -qE '\.github/workflows/'; then
              echo "‚ö†Ô∏è Branch $branch modifies workflows ‚Äî skipping push"
              git checkout main
              git branch -D "$branch"
              continue
            fi
            git push origin "$branch"
            send_webhook "$branch"
            git checkout main
            git branch -D "$branch"
          else
            echo "‚úÖ Branch $branch already exists in fork"
          fi
        done

        # Check for new branches on fork not in upstream (bespoke branches)
        for branch in $origin_branches; do
          if [[ "$branch" == "HEAD" ]]; then
            continue
          fi
          if ! echo "$upstream_branches" | grep -qx "$branch"; then
            echo "‚û°Ô∏è New branch in fork detected: $branch"
            send_webhook "$branch"
          fi
        done
